"""     3.	Sprawdzanie siÅ‚y hasÅ‚a:
Skrypt sprawdzajÄ…cy, czy hasÅ‚o jest wystarczajÄ…co silne, analizujÄ…c jego dÅ‚ugoÅ›Ä‡ i obecnoÅ›Ä‡ rÃ³Å¼nych znakÃ³w (litery, cyfry, znaki specjalne)."""

import re  # ModuÅ‚ do obsÅ‚ugi wyraÅ¼eÅ„ regularnych

def sprawdz_sile_hasla(haslo):
    """Funkcja sprawdzajÄ…ca siÅ‚Ä™ hasÅ‚a na podstawie dÅ‚ugoÅ›ci i znakÃ³w specjalnych."""
    
    # Kryteria oceny hasÅ‚a
    dlugosc = len(haslo) >= 8
    male_litery = bool(re.search(r"[a-z]", haslo))
    duze_litery = bool(re.search(r"[A-Z]", haslo))
    cyfry = bool(re.search(r"[0-9]", haslo))
    znaki_specjalne = bool(re.search(r"[!@#$%^&*(),.?\":{}|<>]", haslo))

    # Ocena siÅ‚y hasÅ‚a
    sila = sum([dlugosc, male_litery, duze_litery, cyfry, znaki_specjalne])

    # Komunikat o sile hasÅ‚a
    if sila == 5:
        return "ğŸŸ¢ Bardzo silne hasÅ‚o!"
    elif sila == 4:
        return "ğŸŸ¡ Silne hasÅ‚o."
    elif sila == 3:
        return "ğŸŸ  Åšrednie hasÅ‚o â€“ warto dodaÄ‡ znaki specjalne lub cyfry."
    else:
        return "ğŸ”´ SÅ‚abe hasÅ‚o â€“ uÅ¼yj co najmniej 8 znakÃ³w, liter, cyfr i znakÃ³w specjalnych!"

# PÄ™tla do wielokrotnego sprawdzania haseÅ‚
while True:
    haslo = input("ğŸ”‘ Podaj hasÅ‚o do sprawdzenia (lub wpisz 'exit' aby zakoÅ„czyÄ‡): ")
    
    if haslo.lower() == "exit":
        print("ğŸ‘‹ ZakoÅ„czono program.")
        break  # WyjÅ›cie z pÄ™tli
    
    wynik = sprawdz_sile_hasla(haslo)
    print("\nğŸ“Œ Wynik analizy:", wynik, "\n")

